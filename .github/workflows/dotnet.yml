# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore

    - name: Add repository directory to Git safe directory
      run: |
        git config --global --add safe.directory ./publish
      shell: bash

    - name: Install dotnet-ef tool
      run: dotnet tool install --global dotnet-ef

    - name: Install Abp Cli
      run: dotnet tool install -g Volo.Abp.Cli

    - name: Install abp libs
      run: abp install-libs

    - name: Create publish directory
      run: mkdir -p ./publish

    - name: Modify appsettings.json for DbMigrator
      run: |
        jq '.ConnectionStrings.Default = "/home/runner/work/DFApp/DFApp/publish/DFApp.db"' ./src/DFApp.DbMigrator/appsettings.json > ./src/DFApp.DbMigrator/appsettings.tmp.json
        mv ./src/DFApp.DbMigrator/appsettings.tmp.json ./src/DFApp.DbMigrator/appsettings.json
      shell: bash
    
    - name: Modify appsettings.json for DFApp.Web
      run: |
        jq '.ConnectionStrings.Default = "/home/runner/work/DFApp/DFApp/publish/DFApp.db"' ./src/DFApp.Web/appsettings.json > ./src/DFApp.Web/appsettings.tmp.json
        mv ./src/DFApp.Web/appsettings.tmp.json ./src/DFApp.Web/appsettings.json
      shell: bash

    - name: Print appsettings.json for DbMigrator
      run: cat ./src/DFApp.DbMigrator/appsettings.json
      shell: bash

    - name: Print appsettings.json for DFApp.Web
      run: cat ./src/DFApp.Web/appsettings.json
      shell: bash

    - name: Update database
      run: dotnet ef database update --connection "Data Source=/home/runner/work/DFApp/DFApp/publish/DFApp.db" --project ./src/DFApp.EntityFrameworkCore/DFApp.EntityFrameworkCore.csproj

    - name: Check if DFApp.db exists
      run: |
        if [ -f /home/runner/work/DFApp/DFApp/publish/DFApp.db ]; then
          echo "DFApp.db exists"
        else
          echo "DFApp.db does not exist"
        fi
      shell: bash

    - name: Print DFApp.db permissions
      run: |
        if [ -f /home/runner/work/DFApp/DFApp/publish/DFApp.db ]; then
          ls -l /home/runner/work/DFApp/DFApp/publish/DFApp.db
        else
          echo "DFApp.db does not exist"
        fi
      shell: bash

    - name: Check if __EFMigrationsHistory table exists
      run: |
        if [ -f /home/runner/work/DFApp/DFApp/publish/DFApp.db ]; then
          sqlite3 /home/runner/work/DFApp/DFApp/publish/DFApp.db ".tables" | grep __EFMigrationsHistory
          if [ $? -eq 0 ]; then
            echo "__EFMigrationsHistory table exists"
          else
            echo "__EFMigrationsHistory table does not exist"
          fi
        else
          echo "DFApp.db does not exist"
        fi
      shell: bash

    - name: Modify DFApp.db permissions to 777
      run: |
        if [ -f /home/runner/work/DFApp/DFApp/publish/DFApp.db ]; then
          chmod 777 /home/runner/work/DFApp/DFApp/publish/DFApp.db
          echo "DFApp.db permissions set to 777"
        else
          echo "DFApp.db does not exist"
        fi
      shell: bash

    - name: Run DbMigrator
      run: dotnet run --project ./src/DFApp.DbMigrator/DFApp.DbMigrator.csproj
      
    - name: Publish project
      run: dotnet publish --configuration Release --framework net8.0 --output ./publish

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-build-artifacts
        path: ./publish
